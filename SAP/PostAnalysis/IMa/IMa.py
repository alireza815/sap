# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.38
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.


import ctypes, os, sys

class IMa(object):

    def __init__(self):
        libpath = os.path.join(os.path.dirname(__file__), "IMa.so")
        self.ima = ctypes.CDLL(libpath)
        self.ima.runprogram.restype = ctypes.c_int
        self.ima.runprogram.argTypes = [ctypes.c_int, ctypes.c_char_p, ctypes.c_char_p]

    def runprogram(self, argumentList, outputPrefix):
        def f(L):
            a = (ctypes.c_char_p * len(L))()
            a[:] = L
            return len(L), a
        return self.ima.runprogram(*f(argumentList) + tuple(outputPrefix))


# from sys import version_info
# if version_info >= (2,6,0):
#     def swig_import_helper():
#         from os.path import dirname
#         import imp
#         try:
#             fp, pathname, description = imp.find_module('_IMa', [dirname(__file__)])
#             _mod = imp.load_module('_IMa', fp, pathname, description)
#         finally:
#             if fp is not None: fp.close()
#         return _mod
#     _IMa = swig_import_helper()
#     del swig_import_helper
# else:
#     import _IMa
# del version_info
# try:
#     _swig_property = property
# except NameError:
#     pass # Python < 2.2 doesn't have 'property'.
# def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
#     if (name == "thisown"): return self.this.own(value)
#     if (name == "this"):
#         if type(value).__name__ == 'SwigPyObject':
#             self.__dict__[name] = value
#             return
#     method = class_type.__swig_setmethods__.get(name,None)
#     if method: return method(self,value)
#     if (not static) or hasattr(self,name):
#         self.__dict__[name] = value
#     else:
#         raise AttributeError("You cannot add attributes to %s" % self)
# 
# def _swig_setattr(self,class_type,name,value):
#     return _swig_setattr_nondynamic(self,class_type,name,value,0)
# 
# def _swig_getattr(self,class_type,name):
#     if (name == "thisown"): return self.this.own()
#     method = class_type.__swig_getmethods__.get(name,None)
#     if method: return method(self)
#     raise AttributeError(name)
# 
# def _swig_repr(self):
#     try: strthis = "proxy of " + self.this.__repr__()
#     except: strthis = ""
#     return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
# 
# try:
#     _object = object
#     _newclass = 1
# except AttributeError:
#     class _object : pass
#     _newclass = 0
# 
# 
# 
# def run_main(*args):
#   return _IMa.run_main(*args)
# run_main = _IMa.run_main
# 
# def runprogram(*args):
#   return _IMa.runprogram(*args)
# runprogram = _IMa.runprogram


